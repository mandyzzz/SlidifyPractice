mtcars$am=factor(mtcars$am)
levels(mtcars$am)
levels(mtcars$am)=c("automatic","manual")
names(mtcars)[9]="transmission"
library(ggplot2)
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))
g1<-g1+geom_violin(colour="black",size=1)
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+title("MPG : automativ vs. manual")
g1
?mtcars
summary(mtcars)
str(mtcars)
dim(mtcars)
head(mtcars,10)
nrow(mtcars[mtcars$am==0,])
nrow(mtcars[mtcars$am==1,])
mtcars$am=factor(mtcars$am)
levels(mtcars$am)
levels(mtcars$am)=c("automatic","manual")
names(mtcars)[9]="transmission"
?mtcars
summary(mtcars)
str(mtcars)
dim(mtcars)
head(mtcars,10)
nrow(mtcars[mtcars$am==0,])
nrow(mtcars[mtcars$am==1,])
mtcars$am=factor(mtcars$am)
levels(mtcars$am)
levels(mtcars$am)=c("automatic","manual")
names(mtcars)[9]="transmission"
str(mtcars)
library(ggplot2)
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))
g1<-g1+geom_violin(colour="black",size=1)
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
file.edit('~/.Rprofile')
options(rpubs.upload.method = "internal")
?mtcars
summary(mtcars)
str(mtcars)
dim(mtcars)
head(mtcars,10)
nrow(mtcars[mtcars$am==0,])
nrow(mtcars[mtcars$am==1,])
mtcars$am=factor(mtcars$am)
levels(mtcars$am)
levels(mtcars$am)=c("automatic","manual")
names(mtcars)[9]="transmission"
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission))
library(ggplot2)
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission))
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
?ggplot
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission))+geom_point()
g1<-g1+geom_violin(colour="black",size=1)
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission))+geom_point()
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission))+geom_point(size=3)
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission))+geom_point(size=5)
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
?xlab
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon",size=5)+ggtitle("MPG : automativ vs. manual")
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon",cex=5)+ggtitle("MPG : automativ vs. manual")
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))+theme(text=element_text(size=14),axis.text.x=element_text(size=8))+geom_point()
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon",cex=5)+ggtitle("MPG : automativ vs. manual")
g1
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))+theme(text=element_text(size=30),axis.text.x=element_text(size=30))+geom_point(
)
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon",cex=5)+ggtitle("MPG : automativ vs. manual")
g1
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))+theme(text=element_text(size=20),axis.text.x=element_text(size=20),title.text=element+text(size=25))+geom_point()
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))+theme(text=element_text(size=20),axis.text.x=element_text(size=20),title.text=element_text(size=25))+geom_point()
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))+geom_point()
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))+geom_point(size=5)
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))+geom_point(colour=transmission,size=5)
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission))+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))+geom_point(size=5)
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
mean(mtcars$mpg[mtcars$am==0,])
mean(mtcars[mtcars$am==0,]$mpg)
mean(mtcars$mpg)
mean((mtcars[mtcars$am==0,])$mpg)
?subset
mean((mtcars[mtcars$transmission==automatic,])$mpg)
mean((subset(mtcars,transmission==automatic))$mpg)
mean((subset(mtcars,transmission=="automatic"))$mpg)
mean((subset(mtcars,transmission=="automatic"))$mpg)-mean((subset(mtcars,transmission=="manual"))$mpg)
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission))+geom_point(size=5)
g1<-g1+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
mean((subset(mtcars,transmission=="automatic"))$mpg)-mean((subset(mtcars,transmission=="manual"))$mpg)
g1<-ggplot(data=mtcars,aes(y=mpg,x=transmission,colour=transmission))+geom_point(size=5)
g1<-g1+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))
g1<-g1+xlab("Transmission")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g1
?mtcars
unique(mtcars$cyl)
g2<-ggplot(mtcars,aes(x=cyl,y=mpg,colour=transmission))+geom_point(size=5)
g2<-g2+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))
g2
g2<-g2+xlab("Number of Cylinders")+ylab("Miles/(US) gallon")+ggtitle("MPG : automativ vs. manual")
g2
?SELECT
?select
?subset
mean((subset(mtcars,transmission=="automatic"&cyl==4))$mpg)-mean((subset(mtcars,transmission=="manual"&cyl==4))$mpg)
mean((subset(mtcars,transmission=="automatic"&cyl==6))$mpg)-mean((subset(mtcars,transmission=="manual"&cyl==6))$mpg)
mean((subset(mtcars,transmission=="automatic"&cyl==8))$mpg)-mean((subset(mtcars,transmission=="manual"&cyl==8))$mpg)
?mtcars
print("8 cylinders ="&mean((subset(mtcars,transmission=="automatic"&cyl==8))$mpg)-mean((subset(mtcars,transmission=="manual"&cyl==8))$mpg))
print("8 cylinders ="mean((subset(mtcars,transmission=="automatic"&cyl==8))$mpg)-mean((subset(mtcars,transmission=="manual"&cyl==8))$mpg))
print("8 cylinders =")&print(mean((subset(mtcars,transmission=="automatic"&cyl==8))$mpg)-mean((subset(mtcars,transmission=="manual"&cyl==8))$mpg))
print(8 cylinders =)&print(mean((subset(mtcars,transmission=="automatic"&cyl==8))$mpg)-mean((subset(mtcars,transmission=="manual"&cyl==8))$mpg))
unique(mtcars$cyl)
g2<-ggplot(mtcars,aes(x=cyl,y=mpg,colour=transmission))+geom_point(size=5)
g2<-g2+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))
g2<-g2+xlab("Number of Cylinders")+ylab("Miles/(US) gallon")+ggtitle("MPG : automatic vs. manual")
g2
mean((subset(mtcars,transmission=="automatic"&cyl==4))$mpg)-mean((subset(mtcars,transmission=="manual"&cyl==4))$mpg)
mean((subset(mtcars,transmission=="automatic"&cyl==6))$mpg)-mean((subset(mtcars,transmission=="manual"&cyl==6))$mpg)
mean((subset(mtcars,transmission=="automatic"&cyl==8))$mpg)-mean((subset(mtcars,transmission=="manual"&cyl==8))$mpg)
g3<-ggplot(mtcars,aes(x=cyl,y=wt,colour=transmission))+geom_point(size=5)
g3<-g3+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))
g3<-g3+xlab("Weight (lb/1000)")+ylab("Miles/(US) gallon")+ggtitle("MPG : automatic vs. manual")
g3
g3<-ggplot(mtcars,aes(x=wt,y=mpg,colour=transmission))+geom_point(size=5)
g3<-g3+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))
g3<-g3+xlab("Weight (lb/1000)")+ylab("Miles/(US) gallon")+ggtitle("MPG : automatic vs. manual")
g3
automatic=subset(mtcars,transmission=="automatic")
manual=subset(mtcars,transmission=="manual")
fitauto<-lm(automatic$mpg~automatic$wt)
fitmanual<-lm(manual$mpg~manual$wt)
summary(fitauto)
summary(fitmanual)
coef(fitauto)[1]
coef(fitauto)[2]-coef(fitmanual)[2]
cor(mtcars$mpg~.)
?cor
plot(mtcars&wt,mtcars$hp)
plot(mtcars$wt,mtcars$hp)
fitauto<-lm(automatic$mpg~automatic$wt+automatic$hp)
fitmanual<-lm(manual$mpg~manual$wt+manual$hp)
summary(fitauto)
summary(fitmanual)
coef(fitauto)[2]-coef(fitmanual)[2]
fitauto<-lm(automatic$mpg~automatic$wt)
fitmanual<-lm(manual$mpg~manual$wt)
summary(fitauto)
summary(fitmanual)
coef(fitauto)[2]-coef(fitmanual)[2]
g3<-g3+abline(intercept=coef(fitauto)[1],slope=coef(fitauto)[2],size=2,color="red")
?abline
g3<-g3+geom_abline(intercept=coef(fitauto)[1],slope=coef(fitauto)[2],lwd=2,col="red")
g3
g3<-g3+geom_abline(intercept=coef(fitauto)[1],slope=coef(fitauto)[2],lwd=1,col="red")
g3<-g3+geom_abline(intercept=coef(fitauto)[1],slope=coef(fitauto)[2],lwd=1,col="red")
g3
g3<-g3+geom_abline(intercept=coef(fitauto)[1],slope=coef(fitauto)[2],lwd=0.3,col="coral")
g3
g3<-g3+geom_abline(intercept=coef(fitmanual)[1],slope=coef(fitmanual)[2],lwd=0.3,col="blue")
g3
g3<-ggplot(mtcars,aes(x=wt,y=mpg,colour=transmission))+geom_point(size=5)
g3<-g3+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))
g3<-g3+xlab("Weight (lb/1000)")+ylab("Miles/(US) gallon")+ggtitle("MPG : automatic vs. manual")
automatic=subset(mtcars,transmission=="automatic")
manual=subset(mtcars,transmission=="manual")
fitauto<-lm(automatic$mpg~automatic$wt)
fitmanual<-lm(manual$mpg~manual$wt)
summary(fitauto)
summary(fitmanual)
coef(fitauto)[2]-coef(fitmanual)[2]
g3<-g3+geom_abline(intercept=coef(fitauto)[1],slope=coef(fitauto)[2],lwd=0.3,col="coral")
g3<-g3+geom_abline(intercept=coef(fitmanual)[1],slope=coef(fitmanual)[2],lwd=0.3,col="blue")
g3
g3<-ggplot(mtcars,aes(x=wt,y=mpg,colour=transmission))+geom_point(size=5)
g3<-g3+theme(text=element_text(size=20),axis.text.x=element_text(size=20),plot.title=element_text(size=25))
g3<-g3+xlab("Weight (lb/1000)")+ylab("Miles/(US) gallon")+ggtitle("MPG : automatic vs. manual")
automatic=subset(mtcars,transmission=="automatic")
manual=subset(mtcars,transmission=="manual")
fitauto<-lm(automatic$mpg~automatic$wt)
fitmanual<-lm(manual$mpg~manual$wt)
summary(fitauto)
summary(fitmanual)
coef(fitauto)[2]-coef(fitmanual)[2]
g3<-g3+geom_abline(intercept=coef(fitauto)[1],slope=coef(fitauto)[2],lwd=1,col="coral")
g3<-g3+geom_abline(intercept=coef(fitmanual)[1],slope=coef(fitmanual)[2],lwd=1,col="blue")
g3
library(MASS)
dataset(shuttle)
data(shuttle)
?shuttle
?str
str(shuttle)
?shuttle
fit1<-glm(shuttle$use~shuttle$wind,family="binomial")
summary(fit1)
fit2<-glm(shuttle$use~shuttle$wind+shuttle$magn,family="binomial")
?anova
anova(fit1,fit2)
summary(fit2)
?shuttle
fit2<-glm(shuttle$use~factor(shuttle$wind)+shuttle$magn,family="binomial")
summary(fit2)
fit2<-glm(shuttle$use~factor(shuttle$magn)+shuttle$wind,family="binomial")
summary(fit2)
?InsectSprays
head(InsectSprays)
fit4<-glm(InsectSprays$count~Insectsprays$spray,family="poisson")
it4<-glm(InsectSprays$count~InsectSprays$spray,family="poisson")
summary(it4)
coef(it4)
fit4<-glm(InsectSprays$count~factor(InsectSprays$spray),family="poisson")
summary(fit4)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y~x)
coef(lm(y[6:11]~x[6:11]))
install.packages("shiny")
library(hiny)
library(shiny)
install.packages("manipulate")
require(rCharts)
install.packages("googleVis")
?manipulate
??manipulate
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
install.packages("devtools")
instal_github("slidify","ramnathv")
install_github("slidify","ramnathv")
library(devtools)
require(devtools)
install_github('rCharts', 'ramnathv')
install_github("slidify","ramnathv")
install.packages("RCurl")
install_github('rCharts', 'ramnathv')
install_github('rCharts', 'ramnathv')
install.packages("RCurl")
install_github('rCharts', 'ramnathv')
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("RCurl")
install_github('rCharts', 'ramnathv')
install_github('slidify', 'ramnathv')
require(devtools)
install_github('slidify', 'ramnathv')
remove.packages(stringi)
installed.packages()
remove.packages(stingi,"C:/Users/zhuangmg/Documents/R/win-library/3.1")
remove.packages(stringi,"C:/Users/zhuangmg/Documents/R/win-library/3.1")
remove.packages('stringi','C:/Users/zhuangmg/Documents/R/win-library/3.1')
devtools::install_github("ropensci/plotly")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("stringi")
library(ggplot2)
library(devtools)
find_rtools()
find_rtools()
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("ggplot2")
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
require(rCharts)
library(slidify)
libraty(rCharts)
library(rCharts)
install_github('rCharts','ramnathv')
set.seed(2)
x<-rnorm(100)
x
x
x<-rnorm(100)
x
install.packages("yhatr")
library(yhatr)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
head(vowel.train)
str(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
str(vowel.train)
mod1<-train(y~.,method="rf",data=vowel.train)
library(caret)
install.package("caret")
install.packages("caret")
library(caret)
mod1<-train(y~.,method="rf",data=vowel.train)
mod1<-train(y~.,method="rf",data=vowel.train)
install.packages("e1071")
mod1<-train(y~.,method="rf",data=vowel.train)
mod1<-train(y~.,method="gbm",data=vowel.train)
mod2<-train(y~.,method="gbm",data=vowel.train)
summary(mod1)
pred1<-predict(mod1,vowel.test)
pred2<-predict(mod2,vowel.train)
summary(pred1)
table(pred1,vowel.test$y)
mod1
?accuracy
mean(pred1 == vowel.test$y)
mean(pred2 == vowel.test$y)
pred2<-predict(mod2,vowel.test)
mean(pred2 == vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,
q
]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod1<-train(diagnosis~.,method="rf",data=training)
mod1<-train(diagnosis~.,method="gbm",data=training)
mod2<-train(diagnosis~.,method="gbm",data=training)
mod3<-train(diagnosis~.,method="Ida",data=training)
mod3<-lm(diagnosis~.,method="Ida",data=training)
library(MASS)
mod3<-lda(diagnosis~.,data=training)
print(mod1)
print(mod2)
print(mod3)
pred1<-predict(mod1,testing)
pred2<-predict(mod2,testing)
pred3<-predict(mod3,testing)
predDF<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combfit<-train(diagnosis~.,method="rf",data=predDF)
print(combfit)
?accuracy
combfit$confusion
combfit<-train(diagnosis~.,method="rf",data=predDF,importance=TRUE, proximity=TRUE)
pred4<-predict(combfit,testing)
combfit<-train(diagnosis~.,method="rf",data=predDF)
pred4<-predict(combfit,testing)
pred4<-predict(combfit,testing)
pred4<-predict(combfit,predDF)
accuracy=sum(pred4)/nrow(predDF)
summary(pred4)
summary(pred1)
summary(pred2)
summary(pred3)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
install.packages("gmlnet")
methods("dgamma")
methods("lm")
method("colSums")
methods("colSums")
methods("show")
library(shiny)
install.packages("shiny")
library(shiny)
setwd("C:\\users\\zhuangmg\\coursera\\Developing data products\\Project 1")
library(shiny)
setwd("C:\\users\\zhuangmg\\coursera\\Developing data products\\Project 1")
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
h1('H1 text'),
h2('h2 Text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyServer(
function(input, output) {
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runAPp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
category   <- c("Underweight", "Normal weight", "Overweight", "Obesity", "Please check values you entered")
category[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
